#!/usr/bin/env bash
# NB. this is a bash re-implementation of
#  * https://github.com/xbmc/xbmc/blob/5ec39d778c6b62e3a229f6a20ebd4e4aa96ecead/tools/EventClients/lib/python/xbmcclient.py

# Usage:
#   *                             kodi_event_packet
#   * PT=BUTTON       map_name=KB kodi_event_packet left
#   *                 map_name=XG kodi_event_packet dpadleft
#   * PT=NOTIFICATION title=test  kodi_event_packet hi there
#   * PT=NOTIFICATION icon=ha.png kodi_event_packet hi there
#   * PT=MOUSE                    kodi_event_packet 255 255

EVENT_SERVER_HOST=${EVENT_SERVER_HOST:-localhost}
EVENT_SERVER_PORT=${EVENT_SERVER_PORT:-9777}

SIGNATURE="${SIGNATURE:-XBMC}"
VERSION_MAJOR=${VERSION_MAJOR:-2}
VERSION_MINOR=${VERSION_MINOR:-0}

MAX_PACKET_SIZE=1024
HEADER_SIZE=32
# shellcheck disable=SC2034
MAX_PAYLOAD_SIZE=$((MAX_PACKET_SIZE - HEADER_SIZE)) # 992

  BT_USE_NAME=$((1<<0)) # 0x01
      BT_DOWN=$((1<<1)) # 0x02
        BT_UP=$((1<<2)) # 0x04
BT_USE_AMOUNT=$((1<<3)) # 0x08
     BT_QUEUE=$((1<<4)) # 0x10
 BT_NO_REPEAT=$((1<<5)) # 0x20
# shellcheck disable=SC2034
# (don't know when BT_VKEY is used)
      BT_VKEY=$((1<<6)) # 0x40
      BT_AXIS=$((1<<7)) # 0x80
BT_AXISSINGLE=$((1<<8)) # 0x100

# shellcheck disable=SC2034
{
        PT_HELO=1
         PT_BYE=2
      PT_BUTTON=3
       PT_MOUSE=4
        PT_PING=5
   PT_BROADCAST=6
PT_NOTIFICATION=7
        PT_BLOB=8
         PT_LOG=9
      PT_ACTION=10
       PT_DEBUG=255

ICON_NONE=0
 ICON_JPG=1
 ICON_PNG=2
 ICON_GIF=3

ACTION_EXECBUILTIN=$((1<<0)) # 0x01
     ACTION_BUTTON=$((1<<1)) # 0x02  (although it _never_ get's used)

# TODO - are there any other options for MOUSE
MS_ABSOLUTE=1
}

bin2hex() {
  # NB. Using the cols=0 option (`-c 0`) seems to add an extra newline
  # plus it may only work on newer versions of `xxd`
  # xxd -ps -c 0
  # so lets use `tr` to strip all the newlines...

  # *Also* the busybox version of `xxd` (which my Home Assistant is using)
  # doesn't seem to like the `-ps` option
  # .. so just use `-p` instead (it ~seems~ to work fine everywhere)

  xxd -p | tr -d '\n'
}

hex2bin() {
  xxd -p -r
}

upcase() {
  tr '[:lower:]' '[:upper:]'
}

unsigned_char() {
  printf '%02x' "$1"
}

unsigned_short() {
  printf '%04x' "$1"
}

unsigned_long() {
  printf '%08x' "$1"
}

format_string() {
  echo -n "$*" | bin2hex
  echo -n '00'
}

signature() {
  echo -n "$SIGNATURE" | bin2hex
}

map_hostname_to_a_32_bit_integer() {
  echo $((16#$(hostname | md5sum | cut -c 1-8)))
}

uid() {
  map_hostname_to_a_32_bit_integer
}

reserved() {
  # repeat 10 do unsigned_char 0; done
  echo -n "00000000000000000000"
}

icon_type() {
  local ref
  # shellcheck disable=SC2154
  icon_ext=$(echo "${icon##*.}" | upcase)
  case $icon_ext in
    JPG|JPEG) ref="ICON_JPG"         ;;
    PNG|GIF ) ref="ICON_${icon_ext}" ;;
    *       ) ref="ICON_NONE"        ;;
  esac

  echo -n ${!ref}
}

header() { local packet_size="$1"
  echo -n "$(
    signature                    )$(
    unsigned_char  "$VERSION_MAJOR")$(
    unsigned_char  "$VERSION_MINOR")$(
    unsigned_short "$packettype"   )$(
    unsigned_long  "${seq:-1}"     )$(
    unsigned_long  "${maxseq:-1}"  )$(
    unsigned_short "$packet_size"  )$(
    unsigned_long  "$(uid)"        )$(
    reserved
  )"
}

# NB. For list of actions see:
#  * https://kodi.wiki/view/Action_IDs
#  * https://kodi.wiki/view/List_of_built-in_functions#Player_built-in's
#  * https://xbmc.github.io/docs.kodi.tv/master/kodi-base/d0/d3e/page__list_of_built_in_functions.html
packetACTION() { local value="${1:-}"
  local ref
  ref="$(echo "ACTION_${action:-EXECBUILTIN}" | upcase)"
  actiontype="${!ref}"

  unsigned_char "$actiontype"
  format_string "$value"
}

# map_name - https://github.com/xbmc/xbmc/blob/5ec39d778c6b62e3a229f6a20ebd4e4aa96ecead/tools/EventClients/lib/python/xbmcclient.py#L333-L342
#  * KB - https://github.com/xbmc/xbmc/blob/5ec39d778c6b62e3a229f6a20ebd4e4aa96ecead/system/keymaps/keyboard.xml
#  * XG - https://github.com/xbmc/xbmc/blob/5ec39d778c6b62e3a229f6a20ebd4e4aa96ecead/system/keymaps/gamepad.xml
#  * R1 - https://github.com/xbmc/xbmc/blob/5ec39d778c6b62e3a229f6a20ebd4e4aa96ecead/system/keymaps/remote.xml
#  * R2 - ???
#  * LI:Antec_Veris_RM200 - https://github.com/xbmc/xbmc/blob/5ec39d778c6b62e3a229f6a20ebd4e4aa96ecead/system/Lircmap.xml#L293C18-L337
packetBUTTON() { local button_name="${1:-}"
  local flags=0

  #map_name=${map_name:-KB}

  code=${code:-0}
  # If no code given then use a default map_name & button_name
  if [[ $code == "0" ]]; then
    flags=$((flags + BT_USE_NAME))
    map_name="${map_name:-KB}"
    button_name="${button_name:-enter}"
  else
    if ! [[ $code =~ ^[0-9]+$ ]]; then
      # if its a char then convert that to the ord(char)
      code="$(printf '%d' "'$code")"
    fi
    # code=$((code + 61440))  # ie. 0xf000 ... but why?
    button_name=""
  fi

  down=${down:-1}
  if [[ $down -eq 1 ]]; then
    flags=$((flags + BT_DOWN))
  else
    flags=$((flags + BT_UP))
  fi

  amount=${amount:-0}
  if [[ $amount -gt 0 ]]; then
    flags=$((flags + BT_USE_AMOUNT))
  fi

  repeat=${repeat:-1}
  if [[ $repeat -lt 2 ]]; then
    flags=$((flags + BT_NO_REPEAT))
  fi

  queue=${queue:-1}
  if [[ $queue -ne 0 ]]; then
    flags=$((flags + BT_QUEUE))
  fi

  axis=${axis:-0}
  case $axis in
    2) flags=$((flags + BT_AXIS))       ;;
    1) flags=$((flags + BT_AXISSINGLE)) ;;
  esac

  unsigned_short "$code"
  unsigned_short "$flags"
  unsigned_short "$amount"
  format_string  "${map_name:-}"
  format_string  "${button_name:-}"
}

# This disconnects a client (uniquely identified by it's `uid`)
packetBYE() {
  :
}

# Not sure this actually works - how do you test it?
# The logs for this packet say:
# `ES: Got Unknown Packet`
packetDEBUG() {
  :
}

# This connects a client (uniquely identified by it's `uid`)
packetHELO() { local device_name="${*:-${device_name:-device name}}"
  reserved=0
  format_string  "${device_name:0:128}"
  unsigned_char  "$(icon_type)"
  unsigned_short $reserved
  unsigned_long  $reserved
  unsigned_long  $reserved

  if [ -e "$icon" ]; then
    bin2hex < "$icon"
  fi
}

packetLOG() { local value="${*:-test}"
  unsigned_char "${loglevel:-0}"
  format_string "$value"
}

packetMOUSE() { local x="${1:-0}" y="${2:-0}"
  # x, y should be in the rang 0..65535
  unsigned_char $MS_ABSOLUTE
  unsigned_short "$x"
  unsigned_short "$y"
}

packetNOTIFICATION() { local value="${*:-test}"
  title="${title:-$(basename "$0")}"

  reserved=0
  format_string "$title"
  format_string "$value"
  unsigned_char "$(icon_type)"
  unsigned_long $reserved

  if [ -e "$icon" ]; then
    bin2hex < "$icon"
  fi
}

# This keeps a client connection alive (uniquely identified by it's `uid`)
packetPING() {
  :
}

packets() {
  local ref="PT_${PT}"
  packettype="${!ref}"

  payloads_hex=$("packet${PT}" "$@")
  payloads_size=$((${#payloads_hex} / 2))

  maxseq=$(((payloads_size / MAX_PAYLOAD_SIZE) + 1))

  # Nb. keeping in mind the hex length is twice the binary length...
  for seq in $(seq 1 $maxseq); do
    start_hex=$((  2 * ((seq - 1) * MAX_PAYLOAD_SIZE                   ) ))
    length_hex=$(( 2 * ((seq - 1) * MAX_PAYLOAD_SIZE + MAX_PAYLOAD_SIZE) ))
    payload_hex="${payloads_hex:$start_hex:$length_hex}"
    [[ $seq -gt 1 ]] && packettype=$PT_BLOB

    hex2bin <<< "$(packettype=$packettype seq=$seq maxseq=$maxseq header "$((${#payload_hex} / 2))")${payload_hex}"
  done
}


PT="$(echo "${pt:-button}" | upcase)" packets "$@"
